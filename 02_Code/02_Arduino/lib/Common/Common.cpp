/*****************************************************************************
Copyright: 2022-2042, Power by Homepea. Ltd.
File name: Common.cpp
Description: 一些常用过程的一些总结
Author: Homepea
Version: 1.0
Date: 2021.12.03
History: (修改历史记录列表， 每条修改记录应包括修改日期、修改者及修改内容简述。)
*****************************************************************************/

#include "Common.h"

u8 guptMonthNum[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

#if ESP_CDC_SERIAL
HWCDC UsbSerial;
#endif

// ***********************************************************************
// @ 函数名称： AbsS8
// @ 函数功能： 计算 s8 数据的绝对值
// @ 函数输入： s8 的数据
// @ 函数输出： s8 数据的绝对值
// @ 注意事项： 无
// ***********************************************************************
u8 AbsS8(s8 x)
{
    return x >= 0 ? x : -x;
}

// ***********************************************************************
// @ 函数名称： AbsS16
// @ 函数功能： 计算 s16 数据的绝对值
// @ 函数输入： s16 的数据
// @ 函数输出： s16 数据的绝对值
// @ 注意事项： 无
// ***********************************************************************
u16 AbsS16(s16 x)
{
    return x >= 0 ? x : -x;
}

// ***********************************************************************
// @ 函数名称： AbsS32
// @ 函数功能： 计算 s32 数据的绝对值
// @ 函数输入： s32 的数据
// @ 函数输出： s32 数据的绝对值
// @ 注意事项： 无
// ***********************************************************************
u32 AbsS32(s32 x)
{
    return x >= 0 ? x : -x;
}

// ***********************************************************************
// @ 函数名称： AbsS64
// @ 函数功能： 计算 s64 数据的绝对值
// @ 函数输入： s64 的数据
// @ 函数输出： s64 数据的绝对值
// @ 注意事项： 无
// ***********************************************************************
u64 AbsS64(s64 x)
{
    return x >= 0 ? x : -x;
}

// ***********************************************************************
// @ 函数名称： AbsDiffU8
// @ 函数功能： 计算两个 u8 数据的差值
// @ 函数输入： 两个 u8 的数据
// @ 函数输出： 两个 u8 数据的差值
// @ 注意事项： 无
// ***********************************************************************
u16 AbsDiffU8(u8 x, u8 y)
{
    return AbsS16((s16)x - (s16)y);
}

// ***********************************************************************
// @ 函数名称： AbsDiffS8
// @ 函数功能： 计算两个 s8 数据的差值
// @ 函数输入： 两个 s8 的数据
// @ 函数输出： 两个 s8 数据的差值
// @ 注意事项： 无
// ***********************************************************************
u16 AbsDiffS8(s8 x, s8 y)
{
    return AbsS16((s16)x - (s16)y);
}

// ***********************************************************************
// @ 函数名称： AbsDiffU16
// @ 函数功能： 计算两个 u16 数据的差值
// @ 函数输入： 两个 u16 的数据
// @ 函数输出： 两个 u16 数据的差值
// @ 注意事项： 无
// ***********************************************************************
u32 AbsDiffU16(u16 x, u16 y)
{
    return AbsS32((s32)x - (s32)y);
}

// ***********************************************************************
// @ 函数名称： AbsDiffS16
// @ 函数功能： 计算两个 s16 数据的差值
// @ 函数输入： 两个 s16 的数据
// @ 函数输出： 两个 s16 数据的差值
// @ 注意事项： 无
// ***********************************************************************
u32 AbsDiffS16(s16 x, s16 y)
{
    return AbsS32((s32)x - (s32)y);
}

// ***********************************************************************
// @ 函数名称： AbsDiffU32
// @ 函数功能： 计算两个 u32 数据的差值
// @ 函数输入： 两个 u32 的数据
// @ 函数输出： 两个 u32 数据的差值
// @ 注意事项： 无
// ***********************************************************************
u64 AbsDiffU32(u32 x, u32 y)
{
    return AbsS64((s64)x - (s64)y);
}

// ***********************************************************************
// @ 函数名称： AbsDiffS32
// @ 函数功能： 计算两个 s32 数据的差值
// @ 函数输入： 两个 s32 的数据
// @ 函数输出： 两个 s32 数据的差值
// @ 注意事项： 无
// ***********************************************************************
u64 AbsDiffS32(s32 x, s32 y)
{
    return AbsS64((s64)x - (s64)y);
}

// ***********************************************************************
// @ 函数名称： Pow10
// @ 函数功能： 计算10的n次方
// @ 函数输入： n
// @ 函数输出： 10的n次方
// @ 注意事项： 无
// ***********************************************************************
u32 Pow10(u16 n)
{
    u32 luiRst = 1;

    for(u16 i = 1; i < n; i++)
    {
        luiRst *= 10;
    }

    return luiRst;
}

// ***********************************************************************
// @ 函数名称： ChkSumU8
// @ 函数功能： 计算 u8 数据的 ChkSum
// @ 函数输入： 数组指针和对应的长度
// @ 函数输出： ChkSum值
// @ 注意事项： 返回的是 0 - Sum 值，即一整条指令中和为0
// ***********************************************************************
u8 ChkSumU8(u8 *pubAddr, u16 uwLength)
{
    u8 lubChkSum = 0;
    for(u16 i = 0; i < uwLength; i++)
    {
        lubChkSum += pubAddr[i];
    }
    return 0 - lubChkSum;           // 所有的内容加起来和为0
}

// ***********************************************************************
// @ 函数名称： MemSetU8
// @ 函数功能： 直接幅值
// @ 函数输入： 数组指针和对应的长度
// @ 函数输出： 无
// @ 注意事项： 无
// ***********************************************************************
void MemSetU8(u8 *pubSrc, u8 value , u16 uwLength)
{
    for(u16 i = 0; i < uwLength; i++)
    {
        pubSrc[i] = value;
    }
}

// ***********************************************************************
// @ 函数名称： MemSetU16
// @ 函数功能： 直接赋值
// @ 函数输入： 数组指针和对应的长度
// @ 函数输出： 无
// @ 注意事项： 无
// ***********************************************************************
void MemSetU16(u16 *pubSrc, u16 value , u16 uwLength)
{
    for(u16 i = 0; i < uwLength; i++)
    {
        pubSrc[i] = value;
    }
}

// ***********************************************************************
// @ 函数名称： MemCpyU8
// @ 函数功能： 复制值
// @ 函数输入： 数组指针和对应的长度
// @ 函数输出： 无
// @ 注意事项： 无
// ***********************************************************************
void MemCpyU8(u8 *pubSrc, u8 *pubDst , u16 uwLength)
{
    for(u16 i = 0; i < uwLength; i++)
    {
        pubDst[i] = pubSrc[i];
    }
}

// ***********************************************************************
// @ 函数名称： MemCpyU16
// @ 函数功能： 复制值
// @ 函数输入： 数组指针和对应的长度
// @ 函数输出： 无
// @ 注意事项： 无
// ***********************************************************************
void MemCpyU16(u16 *pubSrc, u16 *pubDst , u16 uwLength)
{
    for(u16 i = 0; i < uwLength; i++)
    {
        pubDst[i] = pubSrc[i];
    }
}

// ***********************************************************************
// @ 函数名称： Bin2Bcd
// @ 函数功能： bin转BCD
// @ 函数输入： BinData
// @ 函数输出： BcdData
// @ 注意事项： 无
// ***********************************************************************
u8 Bin2Bcd(u8 ubBinData)
{
    return ubBinData + CONST_6 * (ubBinData / CONST_10);
}

// ***********************************************************************
// @ 函数名称： Bin2Bcd
// @ 函数功能： bin转BCD
// @ 函数输入： BcdData
// @ 函数输出： BinData
// @ 注意事项： 无
// ***********************************************************************
u8 Bcd2Bin(u8 ubBcdData)
{
    return ubBcdData - (ubBcdData >> CONST_4) * CONST_6;
}
